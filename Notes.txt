
// npm create vite@latest

//🌐Hooks
📋 Hooks are functions to use some react features in functional components
📋 Hooks are functions that make functional components work like class components



🔍useState ->  useState hook is used to add state in functional components. 
📋 state is nothing but just values or variables of your component
📋 It returns an array with the current state value and a function to update that value.
📋 Updating state with useState involves calling the function returned by the hook and passing the new value.
📋 Array destructuring can be used to simplify the code.
📋 useState can handle different types of data (boolean, number, text, object, array).




🔍useEffect
📋 useEffect is used to perform side effect in our component
📋 side effects are actions which are performed with the outside world
📋 We perform a side effect when we need to reach outside of our React components to do something

📋 useEffect is used for side effects in components, such as fetching data from API, updating the DOM and window, or using timers, setTimeout and setIntervals.
It combines componentDidMount, componentDidUpdate, and componentWillUnmount.

📋 useEffect(callback, dependencies)
📋 callback-> function (side effect logic) = what to run
📋 dependencies-> Array of variables  = when to run
📋 useEffect runs on every render, which means when the count changes render happens and we can control that by dependencies

📋 useEffect has three variations:- 
    without dependencies (runs on every change), 
    with an empty array (runs once on mount), when our component gets render first time => it is useful when we fetch data from API or server, that will fetch data when the component gets render first time
    and with variables (runs on mount and when specified variables change).

📋 Cleanup functions in useEffect are essential to handle scenarios where side effects need to be stopped or cleaned up, preventing performance issues.




🔍useContext
📋 useContext hook is used to manage global data in react application, like Global state, Themes, Services, User Settings
📋 useContext will help us to create global data for our react application and we don't have to pass the data through all the components 
we can access the data in all component whenever we need it 
📋 if you want to pass data just for child component, then you can use props

📋 create context require three steps:
    1) Creating the context (using createContext()) 
    2) Providing the context  (u need to decide which components can access this context with the use of context.provider)
    3) Consuming the context  (import that context and pass that context inside useContext() hook)



🔍useRef
📋useRef is allow us to create mutable variables which will not re-render the component
📋useRef allows us to direct access DOM elements without writing  Document.getElementById/className by ref attribute

📋const variableName = useRef(initialVlaue) 



🔍useReducer
📋useReducer is used to manage complex state in our react application
📋useReducer works like a state management tool
📋state management is used to manage all states of application in a simple way 
📋Always use the useReducer hook when you have a lot of states and methods to handle
📋it returns an array same as useState
📋useReducer accepts two arguments first is reducer function in which we write out all logic and second is default/initial State
📋reducer function takes two parameters first is state second is action 



🔍useLayoutEffect
📋useLayoutEffect works exactly the same as useEffect but the differece is "when it runs"
📋useEffect runs after the DOM is printed on the browser
📋useLayoutEffect runs before the DOM is printed on the browser 
📋whenever we want to  run code before the DOM is printed like we want to measure an element's height, width 
or anything related to layout we can use useLayoutEffect
📋it runs synchronously which means it runs the first line and only move to the if first line's execution is completed
📋The most common use case of useLayoutEffect is to get the dimension of the layout

📋work flow:-
📋React calculates all it's mutations 
📋Then useLayoutEffect will run 
📋Then react prints all elements on DOM
📋Then useEffect will run



🔍useMemo
📋useMemo hook is used to apply Memoization in React
📋Memoization is a technique for improving the performance of code 
📋It is useful to avoid expensive calculations on every render when the returned value is not going to changed.
📋useMemo syntax is same as useEffect

📋 useEffect vs useMemo
📋In useEffect we can't return the value and we can't store it in variable we have to create one more state variable 
then with setValue funtion we can update that 
📋But in UseMemo we can return the value and we can store this value in a variable
📋we perform all side effects in useEffect hook
📋All expensive functions, calculations in useMemo hook

📋it is used to improve performance of our react application
📋we can stop running unwanted functions on Re-rendering




🔍useCallback
📋useCallback is used to return Memoize function
📋it is also useful for preventing functions from being re-created on re-rendering
📋it is similar as useMemo hook, we can't pass parameter
📋useMemo returns the Memoized value, we can pass parameter
📋useCallback returns the Memoized function
📋it accepts two parameter 1st is callback and 2nd is dependencies array




🔍Custom Hooks
📋Custom Hooks are basically reusable functions 
📋Custom Hooks are your own hooks that you create for your own use, and you can use them multiple times in your project
📋instead of writing the long code in every place you create your own hook and you use it like other built in hooks
📋we can use multiple hooks and create something that will help you to skip repeated tasks in your projects 
📋
📋
📋
📋
📋
📋
















 📋 🔍  ⚡ 
